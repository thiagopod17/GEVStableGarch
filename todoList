#   Things to do on Package now
    - Configure the sqp.restriction method for all distribution functions.
    - Find a better way to compute the hessian matrix, instead of using the nelder-mead algorithm
    - Test gsAparchMoments function.
    - Arrumar Sim function 
    - Arrumar AIC function
    - Implement method SHOW ver pacote fGarch
    - Test GEV density to see why qsi < 0 i somewhat frrequent in real data Notce that the Zhao paper has qsi > 0.
    - avoid to estimate a model the user cant.

# Mudancas criticas para fazer e ir testando...
- Configure lower, upper and start values in function GSgarch.GetStart (see upper bound of omega)

  





# Naming: 
      user functions: gsFit, gsSelect, gsMomentAparch
      variables: cond.dist, arma.order, garch.llh
      constans: TOLG, TOLSTABLE, ARMA.ORDER
      internal functions: .getStart, .getFormula


# Changes on function names:

gsGarchDist    .armaGarchDist
filter.Arma     .filterArma
filter.Aparch   .filterAparch
filter.Aparch.Forloop     .filterAparchForLoop
filter1.garch11Fit
gsGetOrder    .getOrder
gsGetStart     .getStart











# Advices for Debugging: 

  - See the TOLG and TOLGSTABLE parameters in function gsGetStart. They were originally set to 
    1e-7 and 2e-2.



# Changes on papper:

    - Correct the formula for the calculation of the stable.moment general (in the paper). Just change the expressions (1-gm)^delta and (1+gm)^delta.
- Write a better deffinition of stable distribution, see def. 1.6 Nolan - chapter 1.
- Make sure the definition of stable distr. is the 1-parameterization





# Future modifications on package:

    - Implement the ARMA dist function for every distribution. 
    - Currently the code is working for ARMA(1,1) ARMA(p,1) ARMA(1,n) models with condtional normal. 
    - Find A More Efficiet Way To Calculate The GEV Aparch Moment Instead Of Using The Integration function.
    - How to cite the code I used from package fGarch: Sim and garchSpec functions.
    - Prediction methods using the results of Brockwell for stable prediction.






#   Important notes about the modifications: APAGAR DEPOIS OU INCLUIR NO CHANGELOG

    We will make the interface of this function more similar to the garchFit function
    from package fGarch to make it more user friendly. 
    The input parameters for this version (march/2015) are:

    - 25 Feb, 2015.
    Parameter input modification
    OK. algorithm: a string parameter that determines the algorithm used for maximum   likelihood estimation.
    OK. cond.dist: name of the conditional distribution, one of gev, stable, norm, std, sstd
    OK. control: control parameters, the same as used for the functions from nlminb, and 'bfgs' and 'Nelder-Mead' from optim.
    OK. data: The dataset to be estimated.
    formula: formula object describing the mean and variance equation of the ARMA-GARCH/APARCH model.
    OK. intercept: this flag determines if the parameter for the mean will be estimated or not
    OK. print.Result (Padrao eh TRUE): A boolean variable specifying whether or not the user wants to print the results after the function calling.
    OK. get.res: (NAO VAMOS TER MAIS ESSA VARIAVEL)
    OK. GSstable.tol e GStol: (CONFIGURAR NO INICIO DA FUNCAO, NAO MAIS NECESSARIA AQUI)
    APARCH: Vamos tirar pois usaremos da formula.
    Before Commiting to github: We saw that the estimated parameters from both GEVStableGarch package from CRAN and from our current version are the same. On the other hand, we saw that the estimated parameters from macbook differ slightly from the windows version. Our goal now is to investigate the filtering process inside the GSGarch.Fit function to make the estimated parameters more similar to the ones from package fGarch. 
    
    - 27 feb, 2015, right before commiting to Github
    Using garch11Fit function from Wurtz (2006) to estimate pure garch(1,1) model with conditional normal distribution This function estimate the garch(1,1)-include.mean-norm-dem2gbp
    
    - The results are exactly the same as in the Code Snippet 2 presented in the papper Wurtz et al. (2006) The function garch11Fit works better if start the conditional  variance with 'var(x)'. Mehoramos muito minha funcao quando para a estimacao do garch(1,1). Fiz isso retirando o filtro do aparch e recolocando o filtro do wuertz, que funciona para o garch11.
 
    - When I put the filter from garch11Fit function inside my GSgarch.Fit the results were exactly the same. Therefore, thats is our starting pointing. Now, I am almost done because my filter function for pure APARCH model is matching exactly the filter function from garch11Fit.   